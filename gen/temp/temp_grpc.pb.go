// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: temp/temp.proto

package temp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExampleAPI_ExampleRpc_FullMethodName          = "/proto.ExampleAPI/ExampleRpc"
	ExampleAPI_ExampleAnyRpc_FullMethodName       = "/proto.ExampleAPI/ExampleAnyRpc"
	ExampleAPI_ExampleClientStream_FullMethodName = "/proto.ExampleAPI/ExampleClientStream"
	ExampleAPI_ExampleServerStream_FullMethodName = "/proto.ExampleAPI/ExampleServerStream"
	ExampleAPI_ExampleBidiStream_FullMethodName   = "/proto.ExampleAPI/ExampleBidiStream"
)

// ExampleAPIClient is the client API for ExampleAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleAPIClient interface {
	ExampleRpc(ctx context.Context, in *Example, opts ...grpc.CallOption) (*Example, error)
	ExampleAnyRpc(ctx context.Context, in *Example, opts ...grpc.CallOption) (*anypb.Any, error)
	ExampleClientStream(ctx context.Context, opts ...grpc.CallOption) (ExampleAPI_ExampleClientStreamClient, error)
	ExampleServerStream(ctx context.Context, in *Example, opts ...grpc.CallOption) (ExampleAPI_ExampleServerStreamClient, error)
	ExampleBidiStream(ctx context.Context, opts ...grpc.CallOption) (ExampleAPI_ExampleBidiStreamClient, error)
}

type exampleAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleAPIClient(cc grpc.ClientConnInterface) ExampleAPIClient {
	return &exampleAPIClient{cc}
}

func (c *exampleAPIClient) ExampleRpc(ctx context.Context, in *Example, opts ...grpc.CallOption) (*Example, error) {
	out := new(Example)
	err := c.cc.Invoke(ctx, ExampleAPI_ExampleRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleAPIClient) ExampleAnyRpc(ctx context.Context, in *Example, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, ExampleAPI_ExampleAnyRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleAPIClient) ExampleClientStream(ctx context.Context, opts ...grpc.CallOption) (ExampleAPI_ExampleClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExampleAPI_ServiceDesc.Streams[0], ExampleAPI_ExampleClientStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleAPIExampleClientStreamClient{stream}
	return x, nil
}

type ExampleAPI_ExampleClientStreamClient interface {
	Send(*Example) error
	CloseAndRecv() (*Example, error)
	grpc.ClientStream
}

type exampleAPIExampleClientStreamClient struct {
	grpc.ClientStream
}

func (x *exampleAPIExampleClientStreamClient) Send(m *Example) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleAPIExampleClientStreamClient) CloseAndRecv() (*Example, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Example)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleAPIClient) ExampleServerStream(ctx context.Context, in *Example, opts ...grpc.CallOption) (ExampleAPI_ExampleServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExampleAPI_ServiceDesc.Streams[1], ExampleAPI_ExampleServerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleAPIExampleServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExampleAPI_ExampleServerStreamClient interface {
	Recv() (*Example, error)
	grpc.ClientStream
}

type exampleAPIExampleServerStreamClient struct {
	grpc.ClientStream
}

func (x *exampleAPIExampleServerStreamClient) Recv() (*Example, error) {
	m := new(Example)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleAPIClient) ExampleBidiStream(ctx context.Context, opts ...grpc.CallOption) (ExampleAPI_ExampleBidiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExampleAPI_ServiceDesc.Streams[2], ExampleAPI_ExampleBidiStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleAPIExampleBidiStreamClient{stream}
	return x, nil
}

type ExampleAPI_ExampleBidiStreamClient interface {
	Send(*Example) error
	Recv() (*Example, error)
	grpc.ClientStream
}

type exampleAPIExampleBidiStreamClient struct {
	grpc.ClientStream
}

func (x *exampleAPIExampleBidiStreamClient) Send(m *Example) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleAPIExampleBidiStreamClient) Recv() (*Example, error) {
	m := new(Example)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExampleAPIServer is the server API for ExampleAPI service.
// All implementations must embed UnimplementedExampleAPIServer
// for forward compatibility
type ExampleAPIServer interface {
	ExampleRpc(context.Context, *Example) (*Example, error)
	ExampleAnyRpc(context.Context, *Example) (*anypb.Any, error)
	ExampleClientStream(ExampleAPI_ExampleClientStreamServer) error
	ExampleServerStream(*Example, ExampleAPI_ExampleServerStreamServer) error
	ExampleBidiStream(ExampleAPI_ExampleBidiStreamServer) error
	mustEmbedUnimplementedExampleAPIServer()
}

// UnimplementedExampleAPIServer must be embedded to have forward compatible implementations.
type UnimplementedExampleAPIServer struct {
}

func (UnimplementedExampleAPIServer) ExampleRpc(context.Context, *Example) (*Example, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExampleRpc not implemented")
}
func (UnimplementedExampleAPIServer) ExampleAnyRpc(context.Context, *Example) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExampleAnyRpc not implemented")
}
func (UnimplementedExampleAPIServer) ExampleClientStream(ExampleAPI_ExampleClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ExampleClientStream not implemented")
}
func (UnimplementedExampleAPIServer) ExampleServerStream(*Example, ExampleAPI_ExampleServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ExampleServerStream not implemented")
}
func (UnimplementedExampleAPIServer) ExampleBidiStream(ExampleAPI_ExampleBidiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ExampleBidiStream not implemented")
}
func (UnimplementedExampleAPIServer) mustEmbedUnimplementedExampleAPIServer() {}

// UnsafeExampleAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleAPIServer will
// result in compilation errors.
type UnsafeExampleAPIServer interface {
	mustEmbedUnimplementedExampleAPIServer()
}

func RegisterExampleAPIServer(s grpc.ServiceRegistrar, srv ExampleAPIServer) {
	s.RegisterService(&ExampleAPI_ServiceDesc, srv)
}

func _ExampleAPI_ExampleRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Example)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleAPIServer).ExampleRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleAPI_ExampleRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleAPIServer).ExampleRpc(ctx, req.(*Example))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleAPI_ExampleAnyRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Example)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleAPIServer).ExampleAnyRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleAPI_ExampleAnyRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleAPIServer).ExampleAnyRpc(ctx, req.(*Example))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleAPI_ExampleClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleAPIServer).ExampleClientStream(&exampleAPIExampleClientStreamServer{stream})
}

type ExampleAPI_ExampleClientStreamServer interface {
	SendAndClose(*Example) error
	Recv() (*Example, error)
	grpc.ServerStream
}

type exampleAPIExampleClientStreamServer struct {
	grpc.ServerStream
}

func (x *exampleAPIExampleClientStreamServer) SendAndClose(m *Example) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleAPIExampleClientStreamServer) Recv() (*Example, error) {
	m := new(Example)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExampleAPI_ExampleServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Example)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExampleAPIServer).ExampleServerStream(m, &exampleAPIExampleServerStreamServer{stream})
}

type ExampleAPI_ExampleServerStreamServer interface {
	Send(*Example) error
	grpc.ServerStream
}

type exampleAPIExampleServerStreamServer struct {
	grpc.ServerStream
}

func (x *exampleAPIExampleServerStreamServer) Send(m *Example) error {
	return x.ServerStream.SendMsg(m)
}

func _ExampleAPI_ExampleBidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleAPIServer).ExampleBidiStream(&exampleAPIExampleBidiStreamServer{stream})
}

type ExampleAPI_ExampleBidiStreamServer interface {
	Send(*Example) error
	Recv() (*Example, error)
	grpc.ServerStream
}

type exampleAPIExampleBidiStreamServer struct {
	grpc.ServerStream
}

func (x *exampleAPIExampleBidiStreamServer) Send(m *Example) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleAPIExampleBidiStreamServer) Recv() (*Example, error) {
	m := new(Example)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExampleAPI_ServiceDesc is the grpc.ServiceDesc for ExampleAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ExampleAPI",
	HandlerType: (*ExampleAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExampleRpc",
			Handler:    _ExampleAPI_ExampleRpc_Handler,
		},
		{
			MethodName: "ExampleAnyRpc",
			Handler:    _ExampleAPI_ExampleAnyRpc_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExampleClientStream",
			Handler:       _ExampleAPI_ExampleClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ExampleServerStream",
			Handler:       _ExampleAPI_ExampleServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExampleBidiStream",
			Handler:       _ExampleAPI_ExampleBidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "temp/temp.proto",
}

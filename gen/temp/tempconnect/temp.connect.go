// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: temp/temp.proto

package tempconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	temp "github.com/lcmaguire/protoc-gen-go-boilerplate/gen/temp"
	anypb "google.golang.org/protobuf/types/known/anypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ExampleAPIName is the fully-qualified name of the ExampleAPI service.
	ExampleAPIName = "proto.ExampleAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExampleAPIExampleRpcProcedure is the fully-qualified name of the ExampleAPI's ExampleRpc RPC.
	ExampleAPIExampleRpcProcedure = "/proto.ExampleAPI/ExampleRpc"
	// ExampleAPIExampleAnyRpcProcedure is the fully-qualified name of the ExampleAPI's ExampleAnyRpc
	// RPC.
	ExampleAPIExampleAnyRpcProcedure = "/proto.ExampleAPI/ExampleAnyRpc"
	// ExampleAPIExampleClientStreamProcedure is the fully-qualified name of the ExampleAPI's
	// ExampleClientStream RPC.
	ExampleAPIExampleClientStreamProcedure = "/proto.ExampleAPI/ExampleClientStream"
	// ExampleAPIExampleServerStreamProcedure is the fully-qualified name of the ExampleAPI's
	// ExampleServerStream RPC.
	ExampleAPIExampleServerStreamProcedure = "/proto.ExampleAPI/ExampleServerStream"
	// ExampleAPIExampleBidiStreamProcedure is the fully-qualified name of the ExampleAPI's
	// ExampleBidiStream RPC.
	ExampleAPIExampleBidiStreamProcedure = "/proto.ExampleAPI/ExampleBidiStream"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	exampleAPIServiceDescriptor                   = temp.File_temp_temp_proto.Services().ByName("ExampleAPI")
	exampleAPIExampleRpcMethodDescriptor          = exampleAPIServiceDescriptor.Methods().ByName("ExampleRpc")
	exampleAPIExampleAnyRpcMethodDescriptor       = exampleAPIServiceDescriptor.Methods().ByName("ExampleAnyRpc")
	exampleAPIExampleClientStreamMethodDescriptor = exampleAPIServiceDescriptor.Methods().ByName("ExampleClientStream")
	exampleAPIExampleServerStreamMethodDescriptor = exampleAPIServiceDescriptor.Methods().ByName("ExampleServerStream")
	exampleAPIExampleBidiStreamMethodDescriptor   = exampleAPIServiceDescriptor.Methods().ByName("ExampleBidiStream")
)

// ExampleAPIClient is a client for the proto.ExampleAPI service.
type ExampleAPIClient interface {
	ExampleRpc(context.Context, *connect.Request[temp.Example]) (*connect.Response[temp.Example], error)
	ExampleAnyRpc(context.Context, *connect.Request[temp.Example]) (*connect.Response[anypb.Any], error)
	ExampleClientStream(context.Context) *connect.ClientStreamForClient[temp.Example, temp.Example]
	ExampleServerStream(context.Context, *connect.Request[temp.Example]) (*connect.ServerStreamForClient[temp.Example], error)
	ExampleBidiStream(context.Context) *connect.BidiStreamForClient[temp.Example, temp.Example]
}

// NewExampleAPIClient constructs a client for the proto.ExampleAPI service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExampleAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExampleAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &exampleAPIClient{
		exampleRpc: connect.NewClient[temp.Example, temp.Example](
			httpClient,
			baseURL+ExampleAPIExampleRpcProcedure,
			connect.WithSchema(exampleAPIExampleRpcMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		exampleAnyRpc: connect.NewClient[temp.Example, anypb.Any](
			httpClient,
			baseURL+ExampleAPIExampleAnyRpcProcedure,
			connect.WithSchema(exampleAPIExampleAnyRpcMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		exampleClientStream: connect.NewClient[temp.Example, temp.Example](
			httpClient,
			baseURL+ExampleAPIExampleClientStreamProcedure,
			connect.WithSchema(exampleAPIExampleClientStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		exampleServerStream: connect.NewClient[temp.Example, temp.Example](
			httpClient,
			baseURL+ExampleAPIExampleServerStreamProcedure,
			connect.WithSchema(exampleAPIExampleServerStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		exampleBidiStream: connect.NewClient[temp.Example, temp.Example](
			httpClient,
			baseURL+ExampleAPIExampleBidiStreamProcedure,
			connect.WithSchema(exampleAPIExampleBidiStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// exampleAPIClient implements ExampleAPIClient.
type exampleAPIClient struct {
	exampleRpc          *connect.Client[temp.Example, temp.Example]
	exampleAnyRpc       *connect.Client[temp.Example, anypb.Any]
	exampleClientStream *connect.Client[temp.Example, temp.Example]
	exampleServerStream *connect.Client[temp.Example, temp.Example]
	exampleBidiStream   *connect.Client[temp.Example, temp.Example]
}

// ExampleRpc calls proto.ExampleAPI.ExampleRpc.
func (c *exampleAPIClient) ExampleRpc(ctx context.Context, req *connect.Request[temp.Example]) (*connect.Response[temp.Example], error) {
	return c.exampleRpc.CallUnary(ctx, req)
}

// ExampleAnyRpc calls proto.ExampleAPI.ExampleAnyRpc.
func (c *exampleAPIClient) ExampleAnyRpc(ctx context.Context, req *connect.Request[temp.Example]) (*connect.Response[anypb.Any], error) {
	return c.exampleAnyRpc.CallUnary(ctx, req)
}

// ExampleClientStream calls proto.ExampleAPI.ExampleClientStream.
func (c *exampleAPIClient) ExampleClientStream(ctx context.Context) *connect.ClientStreamForClient[temp.Example, temp.Example] {
	return c.exampleClientStream.CallClientStream(ctx)
}

// ExampleServerStream calls proto.ExampleAPI.ExampleServerStream.
func (c *exampleAPIClient) ExampleServerStream(ctx context.Context, req *connect.Request[temp.Example]) (*connect.ServerStreamForClient[temp.Example], error) {
	return c.exampleServerStream.CallServerStream(ctx, req)
}

// ExampleBidiStream calls proto.ExampleAPI.ExampleBidiStream.
func (c *exampleAPIClient) ExampleBidiStream(ctx context.Context) *connect.BidiStreamForClient[temp.Example, temp.Example] {
	return c.exampleBidiStream.CallBidiStream(ctx)
}

// ExampleAPIHandler is an implementation of the proto.ExampleAPI service.
type ExampleAPIHandler interface {
	ExampleRpc(context.Context, *connect.Request[temp.Example]) (*connect.Response[temp.Example], error)
	ExampleAnyRpc(context.Context, *connect.Request[temp.Example]) (*connect.Response[anypb.Any], error)
	ExampleClientStream(context.Context, *connect.ClientStream[temp.Example]) (*connect.Response[temp.Example], error)
	ExampleServerStream(context.Context, *connect.Request[temp.Example], *connect.ServerStream[temp.Example]) error
	ExampleBidiStream(context.Context, *connect.BidiStream[temp.Example, temp.Example]) error
}

// NewExampleAPIHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExampleAPIHandler(svc ExampleAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	exampleAPIExampleRpcHandler := connect.NewUnaryHandler(
		ExampleAPIExampleRpcProcedure,
		svc.ExampleRpc,
		connect.WithSchema(exampleAPIExampleRpcMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleAPIExampleAnyRpcHandler := connect.NewUnaryHandler(
		ExampleAPIExampleAnyRpcProcedure,
		svc.ExampleAnyRpc,
		connect.WithSchema(exampleAPIExampleAnyRpcMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleAPIExampleClientStreamHandler := connect.NewClientStreamHandler(
		ExampleAPIExampleClientStreamProcedure,
		svc.ExampleClientStream,
		connect.WithSchema(exampleAPIExampleClientStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleAPIExampleServerStreamHandler := connect.NewServerStreamHandler(
		ExampleAPIExampleServerStreamProcedure,
		svc.ExampleServerStream,
		connect.WithSchema(exampleAPIExampleServerStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleAPIExampleBidiStreamHandler := connect.NewBidiStreamHandler(
		ExampleAPIExampleBidiStreamProcedure,
		svc.ExampleBidiStream,
		connect.WithSchema(exampleAPIExampleBidiStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.ExampleAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExampleAPIExampleRpcProcedure:
			exampleAPIExampleRpcHandler.ServeHTTP(w, r)
		case ExampleAPIExampleAnyRpcProcedure:
			exampleAPIExampleAnyRpcHandler.ServeHTTP(w, r)
		case ExampleAPIExampleClientStreamProcedure:
			exampleAPIExampleClientStreamHandler.ServeHTTP(w, r)
		case ExampleAPIExampleServerStreamProcedure:
			exampleAPIExampleServerStreamHandler.ServeHTTP(w, r)
		case ExampleAPIExampleBidiStreamProcedure:
			exampleAPIExampleBidiStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExampleAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedExampleAPIHandler struct{}

func (UnimplementedExampleAPIHandler) ExampleRpc(context.Context, *connect.Request[temp.Example]) (*connect.Response[temp.Example], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.ExampleAPI.ExampleRpc is not implemented"))
}

func (UnimplementedExampleAPIHandler) ExampleAnyRpc(context.Context, *connect.Request[temp.Example]) (*connect.Response[anypb.Any], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.ExampleAPI.ExampleAnyRpc is not implemented"))
}

func (UnimplementedExampleAPIHandler) ExampleClientStream(context.Context, *connect.ClientStream[temp.Example]) (*connect.Response[temp.Example], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.ExampleAPI.ExampleClientStream is not implemented"))
}

func (UnimplementedExampleAPIHandler) ExampleServerStream(context.Context, *connect.Request[temp.Example], *connect.ServerStream[temp.Example]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.ExampleAPI.ExampleServerStream is not implemented"))
}

func (UnimplementedExampleAPIHandler) ExampleBidiStream(context.Context, *connect.BidiStream[temp.Example, temp.Example]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.ExampleAPI.ExampleBidiStream is not implemented"))
}
